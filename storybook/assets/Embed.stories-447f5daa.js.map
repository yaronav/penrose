{"version":3,"file":"Embed.stories-447f5daa.js","sources":["../../src/Embed.tsx"],"sourcesContent":["import { CSSProperties, useState } from \"react\";\nimport { Simple } from \"./Simple.js\";\nimport Logo from \"./icons/Logo.js\";\nimport Resample from \"./icons/Resample.js\";\n\nconst footerStyle: CSSProperties = {\n  display: \"flex\",\n  overflow: \"hidden\",\n  justifyContent: \"space-between\",\n  padding: \"0 1em\",\n  alignItems: \"center\",\n  backgroundColor: \"#40b4f7\",\n  borderRadius: \"0 0 9px 9px\",\n};\n\nconst containerStyle: CSSProperties = {\n  position: \"relative\",\n  borderRadius: \"10px\",\n  boxShadow: \"0 5px 8px 0 rgba(0, 0, 0, 0.2)\",\n  overflow: \"hidden\",\n  backgroundColor: \"white\",\n};\n\nconst textStyle: CSSProperties = {\n  fontFamily: '\"Open Sans\", sans-serif',\n  color: \"white\",\n  margin: \"0.7em\",\n  fontWeight: \"lighter\",\n  fontSize: \"smaller\",\n};\n\nconst Heart = () => (\n  <span role=\"img\" aria-label=\"heart\">\n    ðŸ’œ\n  </span>\n);\n\ninterface EmbedState {\n  variation: string;\n}\n\nexport default (props: {\n  trio: { substance: string; domain: string; style: string; variation: string };\n}) => {\n  const { trio } = props;\n  const { variation, substance, style, domain } = trio;\n  const [currVariation, setVariation] = useState(variation);\n\n  return (\n    <div className=\"embed-container\" style={containerStyle}>\n      <Simple\n        name={\"embed\"}\n        domain={domain}\n        substance={substance}\n        style={style}\n        variation={currVariation}\n        interactive={false}\n        animate={true}\n        excludeWarnings={[]}\n      />\n      <div style={{ width: \"100%\", height: \"100%\" }} />\n      <div className=\"embed-footer\" style={footerStyle}>\n        <a href=\"https://penrose.cs.cmu.edu/\">\n          <Logo width={24} color={\"white\"} />\n        </a>\n        <div className=\"embed-text\" style={textStyle}>\n          Generated by Penrose with <Heart />\n        </div>\n        <div onClick={() => setVariation(Math.random().toString())}>\n          <Resample size={24} color={\"white\"} />\n        </div>\n      </div>\n    </div>\n  );\n};\n"],"names":["footerStyle","containerStyle","textStyle","Heart","__name","_jsx","Embed$1","props","trio","variation","substance","style","domain","currVariation","setVariation","useState","_jsxs","Logo","Resample"],"mappings":"0YAKA,MAAAA,EAAA,CAAmC,QAAA,OACxB,SAAA,SACC,eAAA,gBACM,QAAA,QACP,WAAA,SACG,gBAAA,UACK,aAAA,aAEnB,EAEAC,EAAA,CAAsC,SAAA,WAC1B,aAAA,OACI,UAAA,iCACH,SAAA,SACD,gBAAA,OAEZ,EAEAC,EAAA,CAAiC,WAAA,0BACnB,MAAA,QACL,OAAA,QACC,WAAA,UACI,SAAA,SAEd,EAEAC,EAAAC,EAAA,IAAAC,EAAA,OAAA,CACE,KAAA,MAAW,aAAA,QAAiB,SAAA,IAE5B,CAAA,EAHF,SAUAC,EAAAF,EAAAG,GAAA,CAGE,KAAA,CAAM,KAAAC,CAAEA,EAAAA,EACR,CAAM,UAAAC,EAAEA,UAAAA,EAAWC,MAAAA,EAAWC,OAAAA,CAAOC,EAAAA,EACrC,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAAN,CAAA,EAEA,OAAAO,EAAA,MAAA,CACE,UAAA,kBAAe,MAAAf,EAAyBA,SAAAA,CAAAA,EAAAA,EAAAA,CAC/B,KAAA,QACC,OAAAW,EACNA,UAAAA,EACAF,MAAAA,EACAC,UAAAA,EACWE,YAAAA,GACE,QAAA,GACJ,gBAAA,CAAA,CACQ,CAAA,EAAAR,EAAA,MAAA,CAEnB,MAAA,CAAY,MAAA,OAAS,OAAA,MAAgB,CAAO,CAAA,EAAAW,EAAA,MAAA,CAC5C,UAAA,eAAe,MAAAhB,EAAsBA,SAAAA,CAAAA,EAAAA,IAAAA,CACnC,KAAA,8BAAQ,SAAAK,EAAAY,EAAA,CACD,MAAA,GAAQ,MAAA,OAAW,CAAA,CAAU,CAAA,EAAAD,EAAA,MAAA,CAEpC,UAAA,aAAe,MAAAd,EAAoBA,SAAAA,CAAAA,6BAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CACE,CAAA,EAAAG,EAAA,MAAA,CAErC,QAAA,IAAAS,EAAA,KAAA,OAAA,EAAA,SAAA,CAAA,EAAyD,SAAAT,EAAAa,EAAA,CAC9C,KAAA,GAAO,MAAA,OAAW,CAAA,CAAU,CAAA,CAAA,CACjC,CAAA,CAAA,CACF,CAAA,CAGZ,EAjCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}