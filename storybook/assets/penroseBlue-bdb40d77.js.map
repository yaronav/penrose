{"version":3,"file":"penroseBlue-bdb40d77.js","sources":["../../src/Checkbox.tsx","../../src/Gridbox.tsx","../../src/themes/penroseBlue.ts"],"sourcesContent":["import styled, { keyframes } from \"styled-components\";\n\nconst Input = styled.input`\n  height: 0;\n  width: 0;\n  opacity: 0;\n  z-index: -1;\n  position: absolute;\n`;\n\nconst Label = styled.label<{ disabled: boolean }>`\n  position: relative;\n  display: inline-block;\n  cursor: ${(props) => (props.disabled ? \"not-allowed\" : \"pointer\")};\n  margin-right: 0.3rem;\n  margin-left: 0.3rem;\n`;\n\nconst rotate = keyframes`\n from {\n    opacity: 0;\n    transform: rotate(0deg);\n  }\n  to {\n    opacity: 1;\n    transform: rotate(45deg);\n  }\n`;\n\nconst Indicator = styled.div`\n  width: 1.2em;\n  height: 1.2em;\n  background: #e6e6e6;\n  top: 0em;\n  left: -1.6em;\n  border: 1px solid ${(props) => props.theme.primary};\n  border-radius: 0.2em;\n\n  ${Input}:not(:disabled):checked & {\n    background: #d1d1d1;\n  }\n\n  ${Label}:hover & {\n    background: #ccc;\n  }\n\n  &::after {\n    content: \"\";\n    position: absolute;\n    display: none;\n  }\n\n  ${Input}:checked + &::after {\n    display: block;\n    top: 0.1em;\n    left: 0.35em;\n    width: 35%;\n    height: 70%;\n    border: solid ${(props) => props.theme.primary};\n    border-width: 0 0.2em 0.2em 0;\n    animation-name: ${rotate};\n    animation-duration: 0.3s;\n    animation-fill-mode: forwards;\n  }\n\n  &::disabled {\n    cursor: not-allowed;\n  }\n`;\n\nexport default function Checkbox({\n  value,\n  checked,\n  onChange,\n  name,\n  id,\n  label,\n  disabled,\n}: {\n  value: string;\n  checked: boolean;\n  onChange: (event: any) => void;\n  name: string;\n  id: string;\n  label: string;\n  disabled: boolean;\n}) {\n  return (\n    <div>\n      <Label htmlFor={id} disabled={disabled}>\n        {/* {label} */}\n        <Input\n          id={id}\n          type=\"checkbox\"\n          name={name}\n          value={value}\n          disabled={disabled}\n          checked={checked}\n          onChange={onChange}\n        />\n        <Indicator />\n      </Label>\n    </div>\n  );\n}\n","import { PenroseState } from \"@penrose/core\";\nimport React, { SVGProps } from \"react\";\nimport styled from \"styled-components\";\nimport Checkbox from \"./Checkbox.js\";\nimport { Simple, SimpleProps } from \"./Simple.js\";\n\nexport type GridboxProps = SimpleProps & {\n  header: string;\n  gridIndex: number;\n  stateful?: boolean;\n  selected?: boolean;\n  metadata: {\n    name: string;\n    data: string;\n  }[];\n  onSelected?: (n: number) => void;\n  onStateUpdate?: (n: number, s: PenroseState) => void;\n};\n\nconst Check = styled(Checkbox)`\n  margin-right: 1rem;\n  margin-left: 1rem;\n`;\n\nconst Svg = styled.svg.attrs({\n  version: \"1.1\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n})``;\n\nconst RefreshIcon = ({ className }: SVGProps<SVGSVGElement>) => (\n  <Svg\n    focusable=\"false\"\n    aria-hidden=\"true\"\n    viewBox=\"0 0 24 24\"\n    className={className}\n  >\n    <path d=\"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"></path>\n  </Svg>\n);\n\nconst Refresh = styled(RefreshIcon)`\n  user-select: none;\n  width: 25px;\n  height: 25px;\n  display: inline-block;\n  fill: currentcolor;\n  transition: fill 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  color: #fff;\n`;\n\nconst Section = styled.div`\n  margin: 0.5rem;\n  width: 25rem;\n  height: 25rem;\n  border-color: ${(props) => props.theme.primary};\n  border-width: 2px;\n  border-style: solid;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Header = styled.div`\n  width: calc(100% - 0.75rem);\n  height: 1.75rem;\n  font-size: 1.25rem;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: 0.5rem 0 0.5rem 0.75rem;\n  vertical-align: text-bottom;\n  color: ${(props) => props.theme.primary};\n`;\n\nconst Body = styled.div`\n  width: calc(25rem - 1rem);\n  position: absolute;\n  background-color: #fff;\n  height: calc(100% - 1rem);\n  border-radius: 5px;\n  padding: 0.5rem;\n  font-size: 0.8rem;\n  font-family:\n    Roboto Mono,\n    Courier New,\n    sans-serif;\n  whitespace: pre-wrap;\n  overflow: scroll;\n`;\n\nconst H2 = styled.div`\n  borderbottom: 1px solid black;\n  padding: 0.5rem 0 0.35rem 0;\n  marginbottom: 0.5rem;\n  fontfamily: sans-serif;\n  color: gray;\n`;\n\nconst HeaderText = styled.div`\n  color: ${(props) => props.theme.primary};\n  vertical-align: text-bottom;\n  font-family: monospace;\n`;\n\nconst ResampleBtn = styled.button`\n  display: inline-block;\n  cursor: pointer;\n  height: 26px;\n  width: 26px;\n  user-select: none;\n  color: #ffffff;\n  background-color: #3f51b5;\n  margin: 0;\n  padding: 0;\n  user-select: none;\n  border-radius: 6px;\n  transition: 0.2s;\n  border: none;\n  outline: none;\n  display: inline-block;\n  cursor: pointer;\n  text-align: center;\n  vertical-align: middle;\n  user-select: none;\n  background-color: ${(props) => props.theme.primary};\n  :hover {\n    filter: brightness(70%);\n    transition: 0.2s;\n  }\n  :disabled {\n    opacity: 0.5;\n    pointer-events: none;\n  }\n`;\n\ninterface GridboxState {\n  showDiagramInfo: boolean;\n  isSelected: boolean;\n  variation: string;\n  substance: string;\n  style: string;\n  domain: string;\n  currentState?: PenroseState;\n}\n\nexport class Gridbox extends React.Component<GridboxProps, GridboxState> {\n  constructor(props: GridboxProps) {\n    super(props);\n    this.state = {\n      substance: props.substance,\n      style: props.style,\n      domain: props.domain,\n      showDiagramInfo: false,\n      isSelected: this.props.selected ?? false,\n      currentState: undefined,\n      variation: props.variation,\n    };\n  }\n  toggleView = () => {\n    this.setState({ showDiagramInfo: !this.state.showDiagramInfo });\n  };\n\n  checkboxClick = () => {\n    this.setState({ isSelected: !this.state.isSelected });\n    if (this.props.onSelected) {\n      this.props.onSelected(this.props.gridIndex);\n    }\n  };\n\n  resample = () => {\n    this.setState({ variation: Math.random().toString() });\n  };\n\n  render() {\n    const { header, stateful, onSelected, onStateUpdate } = this.props;\n    const variation = stateful ? this.state.variation : this.props.variation;\n\n    return (\n      <Section key={`gridbox-container-${this.props.gridIndex}`}>\n        <Header>\n          <HeaderText>{header ?? \"Diagram\"}</HeaderText>\n          <div style={{ display: \"flex\" }}>\n            {this.props.stateful && (\n              <ResampleBtn onClick={this.resample}>\n                <Refresh />\n              </ResampleBtn>\n            )}\n            {onSelected && (\n              <Check\n                checked={this.state.isSelected}\n                value={\"\"}\n                name={\"\"}\n                label={\"\"}\n                id={`checkbox-${this.props.gridIndex}`}\n                disabled={false}\n                onChange={this.checkboxClick}\n              />\n            )}\n          </div>\n        </Header>\n\n        <div\n          onClick={this.toggleView}\n          style={{ height: \"calc(100% - 2.75rem)\", position: \"relative\" }}\n        >\n          {this.state.showDiagramInfo && (\n            <Body>\n              {this.props.metadata.map(({ name, data }) => (\n                <div key={`gridbox-data-${name}`}>\n                  <H2>{name}</H2>\n                  <div\n                    style={{\n                      whiteSpace: \"pre-line\",\n                    }}\n                  >\n                    {data}\n                  </div>\n                </div>\n              ))}\n            </Body>\n          )}\n          <Simple\n            {...this.props}\n            variation={variation}\n            key={`gridbox-${this.props.gridIndex}`}\n            name={`gridbox-${this.props.gridIndex}`}\n            interactive={false}\n            onFrame={(state: PenroseState) => {\n              if (stateful) {\n                this.setState({ currentState: state });\n                if (onStateUpdate !== undefined) {\n                  onStateUpdate(this.props.gridIndex, state);\n                }\n              }\n            }}\n          />\n        </div>\n      </Section>\n    );\n  }\n}\n","export default {\n  primary: \"#40b4f7\",\n  secondary: \"#C9C9C9\",\n};\n"],"names":["Input","styled","Label","label","rotate","keyframes","Indicator","div","props","Checkbox","value","checked","onChange","name","id","_jsx","_jsxs","disabled","__name","Check","Svg","RefreshIcon","className","Refresh","Section","Header","Body","H2","HeaderText","ResampleBtn","button","_Gridbox","React","substance","style","domain","undefined","variation","showDiagramInfo","isSelected","header","stateful","onSelected","onStateUpdate","resample","checkboxClick","toggleView","data","_createElement","Simple","state","Gridbox","penroseBlue"],"mappings":"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"}